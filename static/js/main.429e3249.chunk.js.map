{"version":3,"sources":["components/HeaderComponents/Date.js","components/HeaderComponents/CheckNumber.js","components/HeaderComponents/GovernmentInfo.js","components/HeaderComponents/Header.js","components/SidebarComponents/areaSelect/AreaSelect.js","components/SidebarComponents/areaSelect/DistrictSelect.js","components/SidebarComponents/areaSelect/AreaBlock.js","components/SidebarComponents/List/ListBlock.js","components/SidebarComponents/Sidebar.js","components/LocateControl.js","components/Marker.js","components/MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["DateContainer","year","Intl","DateTimeFormat","format","Date","monthDate","month","day","week","weekday","className","icon","faCalendar","CheckNumber","useState","oddEven","setOddEven","useEffect","getDay","faCog","GovernmentInfo","href","target","rel","faLink","Header","AreaSelect","props","city","cityFn","districtFn","Option","map","item","value","key","name","id","onChange","e","DistrictSelect","district","setCenter","setZoom","option","defaultValue","locate","find","lat","lng","AreaBlock","clinicNum","length","ListBlock","list","clinicListData","clinic","properties","faShareAlt","faHome","address","faPhoneAlt","phone","mask_adult","mask_child","Sidebar","areaData","setSelectCity","selectCity","setSelectDistrict","reduce","pre","cur","Array","from","Set","Object","values","zip_code","flat","LocateControl","this","startDirectly","leaflet","lc","Locate","position","strings","title","locateOptions","maxZoom","enableHighAccuracy","onActivate","addTo","start","Component","withLeaflet","MarkerComponent","districtClinicData","React","activeClinic","setActiveClinic","marker","Marker","geometry","coordinates","onClick","Popup","onClose","setData","a","fetch","res","json","resJson","features","console","log","MapContainer","center","zoom","updated","available","note","custom_note","website","county","town","cunli","clinicData","setClinicData","selectDistrict","clinicDataSource","getData","Map","TileLayer","url","attribution","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k2tCA+BeA,EA3BO,WACpB,IAAMC,EAAO,IAAIC,KAAKC,eAAe,QAAS,CAC5CF,KAAM,YACLG,OAAO,IAAIC,MACRC,EAAY,IAAIJ,KAAKC,eAAe,QAAS,CACjDI,MAAO,QACPC,IAAK,YACJJ,OAAO,IAAIC,MACRI,EAAO,IAAIP,KAAKC,eAAe,QAAS,CAC5CO,QAAS,WACRN,OAAO,IAAIC,MACd,OACE,yBAAKM,UAAU,iBACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAiBC,KAAMC,MACvB,8BAAOZ,IAET,4BACGK,EADH,IAGGG,EAHH,O,QCcSK,EA7BK,WAAO,IAAD,EACMC,mBAAS,IADf,mBACjBC,EADiB,KACRC,EADQ,KAWxB,OARAC,qBAAU,YACJ,IAAIb,MAAOc,SAAW,IAAM,EAC9BF,EAAW,gCAEXA,EAAW,kCAEZ,IAGD,yBAAKN,UAAU,qBACb,yBAAKA,UAAU,eACb,kBAAC,IAAD,CAAiBC,KAAMQ,MACvB,6EAEF,yBAAKT,UAAU,aACZK,EACA,IAFH,4BAKA,mGCNSK,EAjBQ,kBACrB,yBAAKV,UAAU,oBACb,0KAEG,IACD,6BAHF,qHAKE,6BALF,wGAQA,uBAAGW,KAAK,+EAA+EC,OAAO,SAASC,IAAI,uBACzG,kBAAC,IAAD,CAAiBZ,KAAMa,MACvB,+ECASC,G,MARA,kBACb,gCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCYWC,G,MAtBI,SAACC,GAAW,IAE3BC,EACED,EADFC,KAAMC,EACJF,EADIE,OAAQC,EACZH,EADYG,WAEVC,EAASH,EAAKI,KAAI,SAACC,GAAD,OAAU,4BAAQC,MAAOD,EAAME,IAAKF,GAAOA,MAKnE,OACE,4BAAQG,KAAK,GAAGC,GAAG,GAAGC,SALH,SAACC,GACpBV,EAAOU,EAAEjB,OAAOY,OAChBJ,EAAW,MAIRC,KCqBQS,EAhCQ,SAACb,GAAW,IAE/Bc,EACEd,EADFc,SAAUX,EACRH,EADQG,WAAYY,EACpBf,EADoBe,UAAWC,EAC/BhB,EAD+BgB,QAI7BC,EAASH,EAAST,KAAI,SAACC,GAAD,OAAW,4BAAQC,MAAOD,EAAKQ,SAAUN,IAAKF,EAAKQ,UAAWR,EAAKQ,aAY/F,OACE,4BAAQL,KAAK,GAAGC,GAAG,GAAGQ,aAAa,2BAAYP,SAX5B,SAACC,GACpBT,EAAWS,EAAEjB,OAAOY,OACpBS,EAAQ,IACR,IAAMG,EAASL,EAASM,MAAK,SAACd,GAAD,OAAWA,EAAKQ,WAAaF,EAAEjB,OAAOY,SACnEQ,EAAU,CACRM,IAAKF,EAAOE,IACZC,IAAKH,EAAOG,QAMXL,ICYQM,EA7BG,SAACvB,GAAW,IAE1BC,EACED,EADFC,KAAMC,EACJF,EADIE,OAAQY,EACZd,EADYc,SAAUX,EACtBH,EADsBG,WAAYqB,EAClCxB,EADkCwB,UAAWT,EAC7Cf,EAD6Ce,UAAWC,EACxDhB,EADwDgB,QAI5D,OACE,yBAAKjC,UAAU,eACb,kBAAC,EAAD,CAAYkB,KAAMA,EAAMC,OAAQA,EAAQC,WAAYA,IACpD,kBAAC,EAAD,CAAgBW,SAAUA,EAAUX,WAAYA,EAAYY,UAAWA,EAAWC,QAASA,IAC3F,oCAEE,8BAAOQ,EAAUC,QAFnB,gDC8BSC,EAzCG,SAAC1B,GAAW,IAGtB2B,EAFqB3B,EAAnB4B,eAEoBvB,KAAI,SAACwB,GAAD,OAC9B,yBAAKrB,IAAKqB,EAAOC,WAAWpB,GAAI3B,UAAU,QACxC,yBAAKA,UAAU,SACb,4BAAK8C,EAAOC,WAAWrB,MACvB,kBAAC,IAAD,CAAiBzB,KAAM+C,OAEzB,uBAAGhD,UAAU,QACX,kBAAC,IAAD,CAAiBC,KAAMgD,MACtBH,EAAOC,WAAWG,SAErB,uBAAGlD,UAAU,OACX,kBAAC,IAAD,CAAiBC,KAAMkD,MACvB,uBAAGxC,KAAI,cAASmC,EAAOC,WAAWK,QAAUN,EAAOC,WAAWK,QAEhE,yBAAKpD,UAAU,WACb,0BAAMA,UAAU,SACd,2CACC8C,EAAOC,WAAWM,YAErB,0BAAMrD,UAAU,SACd,2CACC8C,EAAOC,WAAWO,iBAM3B,OACE,yBAAKtD,UAAU,aACZ4C,ICSQW,EAvCC,SAACtC,GAAW,IAExBuC,EACEvC,EADFuC,SAAUC,EACRxC,EADQwC,cAAeC,EACvBzC,EADuByC,WAAYC,EACnC1C,EADmC0C,kBAAmBd,EACtD5B,EADsD4B,eAAgBb,EACtEf,EADsEe,UAAWC,EACjFhB,EADiFgB,QAG/Ef,EAAOsC,EAASI,QAAO,SAACC,EAAKC,GAAN,OAAcC,MAAMC,KAAK,IAAIC,IAAJ,sBAAYJ,GAAZ,CAAiBK,OAAOC,OAAOL,GAAK,SAAO,IAG3F/B,EAAW,CAAC,CAChBqC,SAAU,EACVrC,SAAU,8BACTyB,EAASI,QAAO,SAACC,EAAKC,GAAN,OAAeJ,IAAeI,EAAI5C,KAAnB,sBAA8B2C,GAA9B,CAAmCC,IAAnC,YAA8CD,KAAO,KAAKQ,OAG5F,OACE,yBAAKrE,UAAU,WACb,kBAAC,EAAD,CACEkB,KAAMA,EACNa,SAAUA,EACVZ,OAAQsC,EACRrC,WAAYuC,EACZlB,UAAWI,EACXb,UAAWA,EACXC,QAASA,IAEX,kBAAC,EAAD,CAAWY,eAAgBA,M,gEC3B3ByB,E,4LACiB,IAAD,EACiBC,KAAKtD,MAAhCuD,EADU,EACVA,cACAlD,EAFU,EACKmD,QACfnD,IAcFoD,EAAK,IAAIC,IAZO,CACpBC,SAAU,UACVC,QAAS,CACPC,MAAO,oBAETC,cAAe,CACbC,QAAS,GACTC,oBAAoB,GAEtBC,WAAY,eAIdR,EAAGS,MAAM7D,GAELkD,GAEFE,EAAGU,U,+BAKL,OAAO,S,GA3BiBC,aAoCbC,cAAYhB,G,iCCgCZiB,EAlES,SAACtE,GAAW,IAC1BuE,EAAuBvE,EAAvBuE,mBADyB,EAEOC,IAAMrF,SAAS,MAFtB,mBAE1BsF,EAF0B,KAEZC,EAFY,KAG3BC,EAASJ,EAAmBlE,KAAI,SAACwB,GAAD,OACpC,kBAAC+C,EAAA,EAAD,CACEpE,IAAKqB,EAAOC,WAAWpB,GACvBiD,SAAU,CAAC9B,EAAOgD,SAASC,YAAY,GAAIjD,EAAOgD,SAASC,YAAY,IACvEC,QAAS,WACPL,EAAgB7C,SAItB,OACE,oCACE,kBAAC,IAAD,KACI8C,GAEHF,GACD,kBAACO,EAAA,EAAD,CACErB,SAAU,CACRc,EAAaI,SAASC,YAAY,GAClCL,EAAaI,SAASC,YAAY,IAEpCG,QAAS,WACPP,EAAgB,QAGlB,yBAAK3F,UAAU,SACb,4BAAK0F,EAAa3C,WAAWrB,MAC7B,uBAAG1B,UAAU,aACV0F,EAAa3C,WAAWG,SAE3B,uBAAGlD,UAAU,YACX,kBAAC,IAAD,CAAiBC,KAAMkD,MACtB,IACD,uBAAGxC,KAAI,cAAS+E,EAAa3C,WAAWK,QAAUsC,EAAa3C,WAAWK,QAE5E,yBAAKpD,UAAU,aACb,yBAAKA,UAAU,cACb,mEACA,uBAAGA,UAAU,YACX,8BAAO0F,EAAa3C,WAAWM,YAC9B,IAFH,SAMF,yBAAKrD,UAAU,cACb,mEACA,uBAAGA,UAAU,YACX,8BAAO0F,EAAa3C,WAAWO,YAC9B,IAFH,a,oDC1Cd,WAAuB6C,GAAvB,iBAAAC,EAAA,+EAEsBC,MAAM,mJAF5B,cAEUC,EAFV,gBAG0BA,EAAIC,OAH9B,OAGUC,EAHV,OAIIL,EACEK,EAAQC,UALd,kDAQIC,QAAQC,IAAR,MARJ,2D,sBAYA,IAgFeC,EAhFM,SAAC3F,GAAW,IA6B3BuE,EA3BFqB,EACE5F,EADF4F,OAAQC,EACN7F,EADM6F,KAAM9E,EACZf,EADYe,UAAWC,EACvBhB,EADuBgB,QAFG,EAIM7B,mBAClC,CAAC,CACC2C,WAAY,CACVpB,GAAI,GACJD,KAAM,GACN0B,MAAO,GACPF,QAAS,GACTG,WAAY,EACZC,WAAY,EACZyD,QAAS,GACTC,UAAW,GACXC,KAAM,GACNC,YAAa,GACbC,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,MAAO,IAETxB,SAAU,CACRC,YAAa,CAAC,EAAG,OAvBO,mBAIvBwB,EAJuB,KAIXC,EAJW,OA2BMpH,mBAAS,sBA3Bf,mBA2BvBsD,EA3BuB,KA2BXD,EA3BW,OA4BcrD,mBAAS,IA5BvB,mBA4BvBqH,EA5BuB,KA4BP9D,EA5BO,KA+BxB+D,EAAmBH,EAAW3D,QAAO,SAACC,EAAKC,GAAN,4BAAmBD,GAAnB,CAAwBC,EAAIf,WAAWqE,SAAW1D,EAAaI,EAAM,OAAM,IAAIO,OAY1H,OATEmB,EADqB,KAAnBiC,EACmBC,EAEAA,EAAiB9D,QAAO,SAACC,EAAKC,GAAN,4BAAkBD,GAAlB,CAAuBC,EAAIf,WAAWsE,OAASI,EAAiB3D,EAAM,OAAK,IAAIO,OAG9H9D,qBAAU,Y,oCACRoH,CAAQH,KACP,IAGD,oCACE,kBAAC,EAAD,MACA,yBAAKxH,UAAU,OACb,kBAAC,EAAD,CACEwD,SAAUA,EACVX,eAAgB2C,EAChB9B,WAAYA,EACZD,cAAeA,EACfE,kBAAmBA,EACnB3B,UAAWA,EACXC,QAASA,IAEX,kBAAC2F,EAAA,EAAD,CAAKf,OAAQA,EAAQC,KAAMA,EAAM9B,QAAS,IACxC,kBAAC6C,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAEd,kBAAC,EAAD,CAAevD,eAAe,IAC9B,kBAAC,EAAD,CAAiBgB,mBAAoBA,QCvEhCwC,MAVf,WAAgB,IAAD,EACe5H,mBAAS,CAAEkC,IAAK,WAAYC,IAAK,aADhD,mBACNsE,EADM,KACE7E,EADF,OAEW5B,mBAAS,GAFpB,mBAEN0G,EAFM,KAEA7E,EAFA,KAGb,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,CAAc6G,OAAQA,EAAQC,KAAMA,EAAM9E,UAAWA,EAAWC,QAASA,MCC3DgG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.429e3249.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendar } from '@fortawesome/free-regular-svg-icons';\n\nconst DateContainer = () => {\n  const year = new Intl.DateTimeFormat('zh-TW', {\n    year: 'numeric',\n  }).format(new Date());\n  const monthDate = new Intl.DateTimeFormat('zh-TW', {\n    month: 'short',\n    day: 'numeric',\n  }).format(new Date());\n  const week = new Intl.DateTimeFormat('zh-TW', {\n    weekday: 'narrow',\n  }).format(new Date());\n  return (\n    <div className=\"DateContainer\">\n      <div className=\"year\">\n        <FontAwesomeIcon icon={faCalendar} />\n        <span>{year}</span>\n      </div>\n      <h1>\n        {monthDate}\n(\n        {week}\n)\n      </h1>\n    </div>\n  );\n};\n\nexport default DateContainer;\n","import React, { useState, useEffect } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCog } from '@fortawesome/free-solid-svg-icons';\n\n\nconst CheckNumber = () => {\n  const [oddEven, setOddEven] = useState('');\n\n  useEffect(() => {\n    if (new Date().getDay() % 2 === 0) {\n      setOddEven('偶數 (0. 2. 4. 6. 8)');\n    } else {\n      setOddEven('奇數 (1. 3. 5. 7. 9)');\n    }\n  }, []);\n\n  return (\n    <div className=\"checkNumContainer\">\n      <div className=\"settingHint\">\n        <FontAwesomeIcon icon={faCog} />\n        <span>本日能購買口罩</span>\n      </div>\n      <div className=\"checkHint\">\n        {oddEven}\n        {' '}\n        可買口罩\n      </div>\n      <p>\n        請檢查您身分證尾數號碼\n      </p>\n    </div>\n  );\n};\n\nexport default CheckNumber;\n","import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLink } from '@fortawesome/free-solid-svg-icons';\n\nconst GovernmentInfo = () => (\n  <div className=\"govInfoContainer\">\n    <p>\n民眾持本人「健保卡」，每人限購2片，7天內不可重複\n      {' '}\n      <br />\n可委託親友代為購買，一人限代一張健保卡\n      <br />\n兒童口罩僅限\b12歲以下兒童健保卡購買\n    </p>\n    <a href=\"http://www.nhi.gov.tw/Bbs_total.aspx?n=73CEDFC921268679&sms=D6D5367550F18590\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <FontAwesomeIcon icon={faLink} />\n      <span>健保署公告連結</span>\n    </a>\n  </div>\n);\n\nexport default GovernmentInfo;\n","import React from 'react';\n\nimport DateContainer from './Date';\nimport CheckNumber from './CheckNumber';\nimport GovernmentInfo from './GovernmentInfo';\n\nimport '../../assets/headerScss.scss';\n\n\nconst Header = () => (\n  <header>\n    <DateContainer />\n    <CheckNumber />\n    <GovernmentInfo />\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AreaSelect = (props) => {\n  const {\n    city, cityFn, districtFn,\n  } = props;\n  const Option = city.map((item) => <option value={item} key={item}>{item}</option>);\n  const handleChange = (e) => {\n    cityFn(e.target.value);\n    districtFn('');\n  };\n  return (\n    <select name=\"\" id=\"\" onChange={handleChange}>\n      {Option}\n    </select>\n  );\n};\n\nAreaSelect.propTypes = {\n  city: PropTypes.arrayOf(PropTypes.string).isRequired,\n  cityFn: PropTypes.func.isRequired,\n  districtFn: PropTypes.func.isRequired,\n};\n\nexport default AreaSelect;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst DistrictSelect = (props) => {\n  const {\n    district, districtFn, setCenter, setZoom,\n  } = props;\n\n\n  const option = district.map((item) => (<option value={item.district} key={item.district}>{item.district}</option>));\n\n  const handleChange = (e) => {\n    districtFn(e.target.value);\n    setZoom(14);\n    const locate = district.find((item) => (item.district === e.target.value));\n    setCenter({\n      lat: locate.lat,\n      lng: locate.lng,\n    });\n  };\n\n  return (\n    <select name=\"\" id=\"\" defaultValue=\"---請選擇---\" onChange={handleChange}>\n      {option}\n    </select>\n  );\n};\n\nDistrictSelect.propTypes = {\n  district: PropTypes.arrayOf(PropTypes.object).isRequired,\n  districtFn: PropTypes.func.isRequired,\n  setCenter: PropTypes.func.isRequired,\n  setZoom: PropTypes.func.isRequired,\n};\n\nexport default DistrictSelect;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AreaSelect from './AreaSelect';\nimport DistrictSelect from './DistrictSelect';\n\nconst AreaBlock = (props) => {\n  const {\n    city, cityFn, district, districtFn, clinicNum, setCenter, setZoom,\n  } = props;\n\n\n  return (\n    <div className=\"selectBlock\">\n      <AreaSelect city={city} cityFn={cityFn} districtFn={districtFn} />\n      <DistrictSelect district={district} districtFn={districtFn} setCenter={setCenter} setZoom={setZoom} />\n      <p>\n共\n        <span>{clinicNum.length}</span>\n家可以購買口罩\n      </p>\n    </div>\n  );\n};\n\nAreaBlock.propTypes = {\n  city: PropTypes.arrayOf(PropTypes.string).isRequired,\n  cityFn: PropTypes.func.isRequired,\n  district: PropTypes.arrayOf(PropTypes.object).isRequired,\n  districtFn: PropTypes.func.isRequired,\n  clinicNum: PropTypes.arrayOf(PropTypes.objectOf).isRequired,\n  setCenter: PropTypes.func.isRequired,\n  setZoom: PropTypes.func.isRequired,\n};\n\nexport default AreaBlock;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPhoneAlt, faHome, faShareAlt } from '@fortawesome/free-solid-svg-icons';\n\nconst ListBlock = (props) => {\n  const { clinicListData } = props;\n\n  const list = clinicListData.map((clinic) => (\n    <div key={clinic.properties.id} className=\"list\">\n      <div className=\"title\">\n        <h2>{clinic.properties.name}</h2>\n        <FontAwesomeIcon icon={faShareAlt} />\n      </div>\n      <p className=\"addr\">\n        <FontAwesomeIcon icon={faHome} />\n        {clinic.properties.address}\n      </p>\n      <p className=\"tel\">\n        <FontAwesomeIcon icon={faPhoneAlt} />\n        <a href={`tel:${clinic.properties.phone}`}>{clinic.properties.phone}</a>\n      </p>\n      <div className=\"maskNum\">\n        <span className=\"adult\">\n          <p>成人</p>\n          {clinic.properties.mask_adult}\n        </span>\n        <span className=\"child\">\n          <p>兒童</p>\n          {clinic.properties.mask_child}\n        </span>\n      </div>\n    </div>\n  ));\n\n  return (\n    <div className=\"listBlock\">\n      {list}\n    </div>\n  );\n};\n\nListBlock.propTypes = {\n  clinicListData: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default ListBlock;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../../assets/sidebarScss.scss';\nimport AreaBlock from './areaSelect/AreaBlock';\nimport ListBlock from './List/ListBlock';\n\nconst Sidebar = (props) => {\n  const {\n    areaData, setSelectCity, selectCity, setSelectDistrict, clinicListData, setCenter, setZoom,\n  } = props;\n\n  const city = areaData.reduce((pre, cur) => Array.from(new Set([...pre, Object.values(cur)[2]])), []);\n\n\n  const district = [{\n    zip_code: 0,\n    district: '--- 請選擇 ---',\n  }, areaData.reduce((pre, cur) => (selectCity === cur.city ? [...pre, cur] : [...pre]), [])].flat();\n\n\n  return (\n    <div className=\"sideBar\">\n      <AreaBlock\n        city={city}\n        district={district}\n        cityFn={setSelectCity}\n        districtFn={setSelectDistrict}\n        clinicNum={clinicListData}\n        setCenter={setCenter}\n        setZoom={setZoom}\n      />\n      <ListBlock clinicListData={clinicListData} />\n    </div>\n  );\n};\n\nSidebar.propTypes = {\n  areaData: PropTypes.arrayOf(PropTypes.object).isRequired,\n  clinicListData: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectCity: PropTypes.string.isRequired,\n  setSelectCity: PropTypes.func.isRequired,\n  setSelectDistrict: PropTypes.func.isRequired,\n  setZoom: PropTypes.func.isRequired,\n};\n\nexport default Sidebar;\n","import { Component } from 'react';\nimport { withLeaflet } from 'react-leaflet';\nimport Locate from 'leaflet.locatecontrol';\nimport PropTypes from 'prop-types';\n\nclass LocateControl extends Component {\n  componentDidMount() {\n    const { startDirectly, leaflet } = this.props;\n    const { map } = leaflet;\n\n    const locateOptions = {\n      position: 'topleft',\n      strings: {\n        title: 'Show my location',\n      },\n      locateOptions: {\n        maxZoom: 17,\n        enableHighAccuracy: true,\n      },\n      onActivate: () => {}, // callback before engine starts retrieving locations\n    };\n\n    const lc = new Locate(locateOptions);\n    lc.addTo(map);\n\n    if (startDirectly) {\n      // request location update and set location\n      lc.start();\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLocateControl.propTypes = {\n  startDirectly: PropTypes.bool.isRequired,\n  leaflet: PropTypes.objectOf(PropTypes.object).isRequired,\n};\n\nexport default withLeaflet(LocateControl);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Marker, Popup } from 'react-leaflet';\nimport MarkerClusterGroup from 'react-leaflet-markercluster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPhoneAlt, faHome, faShareAlt } from '@fortawesome/free-solid-svg-icons';\n\nconst MarkerComponent = (props) => {\n  const { districtClinicData } = props;\n  const [activeClinic, setActiveClinic] = React.useState(null);\n  const marker = districtClinicData.map((clinic) => (\n    <Marker\n      key={clinic.properties.id}\n      position={[clinic.geometry.coordinates[1], clinic.geometry.coordinates[0]]}\n      onClick={() => {\n        setActiveClinic(clinic);\n      }}\n    />\n  ));\n  return (\n    <>\n      <MarkerClusterGroup>\n        { marker }\n      </MarkerClusterGroup>\n      {activeClinic && (\n      <Popup\n        position={[\n          activeClinic.geometry.coordinates[1],\n          activeClinic.geometry.coordinates[0],\n        ]}\n        onClose={() => {\n          setActiveClinic(null);\n        }}\n      >\n        <div className=\"popup\">\n          <h2>{activeClinic.properties.name}</h2>\n          <p className=\"popupAddr\">\n            {activeClinic.properties.address}\n          </p>\n          <p className=\"popupTel\">\n            <FontAwesomeIcon icon={faPhoneAlt} />\n            {' '}\n            <a href={`tel:${activeClinic.properties.phone}`}>{activeClinic.properties.phone}</a>\n          </p>\n          <div className=\"popupMask\">\n            <div className=\"popupAdult\">\n              <p>成人口罩數量</p>\n              <p className=\"popupNum\">\n                <span>{activeClinic.properties.mask_adult}</span>\n                {' '}\n/200\n              </p>\n            </div>\n            <div className=\"popupChild\">\n              <p>兒童口罩數量</p>\n              <p className=\"popupNum\">\n                <span>{activeClinic.properties.mask_child}</span>\n                {' '}\n/50\n              </p>\n            </div>\n          </div>\n        </div>\n      </Popup>\n      )}\n    </>\n  );\n};\n\nMarkerComponent.propTypes = {\n  districtClinicData: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default MarkerComponent;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Map, TileLayer } from 'react-leaflet';\n\nimport '../assets/mapContainer.scss';\n\nimport Header from './HeaderComponents/Header';\nimport Sidebar from './SidebarComponents/Sidebar';\nimport LocateControl from './LocateControl';\nimport MarkerComponent from './Marker';\n\nimport areaData from '../latlng.json';\n\nasync function getData(setData) {\n  try {\n    const res = await fetch('https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json?fbclid=IwAR14GsJ3L_SUQSTO1F9ru1pydJrv2t9KJA5xQqqhw5Fode7Y7VGubLGjnBM');\n    const resJson = await res.json();\n    setData(\n      resJson.features,\n    );\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nconst MapContainer = (props) => {\n  const {\n    center, zoom, setCenter, setZoom,\n  } = props;\n  const [clinicData, setClinicData] = useState(\n    [{\n      properties: {\n        id: '',\n        name: '',\n        phone: '',\n        address: '',\n        mask_adult: 0,\n        mask_child: 0,\n        updated: '',\n        available: '',\n        note: '',\n        custom_note: '',\n        website: '',\n        county: '',\n        town: '',\n        cunli: '',\n      },\n      geometry: {\n        coordinates: [0, 0],\n      },\n    }],\n  );\n  const [selectCity, setSelectCity] = useState('臺北市');\n  const [selectDistrict, setSelectDistrict] = useState('');\n  let districtClinicData;\n\n  const clinicDataSource = clinicData.reduce((pre, cur) => ([...pre, cur.properties.county === selectCity ? cur : []]), []).flat();\n\n  if (selectDistrict === '') {\n    districtClinicData = clinicDataSource;\n  } else {\n    districtClinicData = clinicDataSource.reduce((pre, cur) => [...pre, cur.properties.town === selectDistrict ? cur : []], []).flat();\n  }\n\n  useEffect(() => {\n    getData(setClinicData);\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <div className=\"map\">\n        <Sidebar\n          areaData={areaData}\n          clinicListData={districtClinicData}\n          selectCity={selectCity}\n          setSelectCity={setSelectCity}\n          setSelectDistrict={setSelectDistrict}\n          setCenter={setCenter}\n          setZoom={setZoom}\n        />\n        <Map center={center} zoom={zoom} maxZoom={19}>\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />\n          <LocateControl startDirectly={false} />\n          <MarkerComponent districtClinicData={districtClinicData} />\n        </Map>\n      </div>\n    </>\n  );\n};\n\nMapContainer.propTypes = {\n  center: PropTypes.shape({\n    lat: PropTypes.number,\n    lng: PropTypes.number,\n  }).isRequired,\n  zoom: PropTypes.number.isRequired,\n  setCenter: PropTypes.func.isRequired,\n  setZoom: PropTypes.func.isRequired,\n};\n\n\nexport default MapContainer;\n","import React, { useState } from 'react';\nimport './App.css';\n\n// 元件\nimport MapContainer from './components/MapContainer';\n\nfunction App() {\n  const [center, setCenter] = useState({ lat: 23.8759391, lng: 120.588669 });\n  const [zoom, setZoom] = useState(8);\n  return (\n    <div className=\"App\">\n      <MapContainer center={center} zoom={zoom} setCenter={setCenter} setZoom={setZoom} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}